Reflection 13th july

1. To implement recursion, first implement the base or the stopping condition.
2. Ctrl-Alt-k kills an entire expression.
3. When unsure about the number of arguments that will be passed to a function we use &, as in (defn func [ arg1 & rest] , the rest of the arguments are stored in 'rest' as a sequence.
4. Concat takes two sequences as arguments. We cannot concat a sequence and a single number.
5. Concat takes more than two sequences , while conj and cons take one sequence and one or more numbers.
6. Compliment is a special type of function which takes a function as an argument and returns a function as well.
7. Ctrl-Shift-k also kills an entire expression.


Mistakes
1. Used defn instead of def while using compliment function to create another function.
2. While writing my-complement function, returned the expression (not f) instead of a function.


Reflection 14th july

1. Test Driven Development is a strategy in which we write the test cases first and then write the actual function.
2. Writing the test case makes us understand the function input, output and behaviour better.
3. We can use test libraries to write tests, clojure has a inbuilt test library called clojure.test
4. Expectations is a library to write and check tests, auto-expectations makes the job easier by running the tests everytime a test file or core file is modified and saved and lists the tests which were failed.
5.When a test fails, expectations also shows how the expected and actual outputs differ.
6.To replace all the occurences of a string with another string we can use 'M-%', then we type the text to be replaced press enter, followed by replacement text then press 'y' or 'n' for each occurence or '!' to replace all further occurences.
7.Write the test for a function, before writing the test function.


15th july

TO DO :
1.Read chapter 5
2.Implement comp function
3.Write the game.

Reflection :
1.While writing tests, we divide the whole task into pure functions, and one impure function which deals with input output or database.
2.Pure functions are referentially transparent i.e. their output depends only on their arguments and on immutable data.
3.Pure functions do not create side effects. However we need impure functions to create visible output ex. println is an impure function.
4.When using recursion, each recursive call to the function creates a new scope in which the arguments are bind to different values and not mutated.
5.Creating a lot of intermediate values while running a recursive program does not crash it because internally clojure's immutable data structures are implemented using structural sharing.
6.Combining functions so that the return value of one function is passed as an argument to another function is called functional composition.
7.Int function rounds up a number to the lower integer. Ex. (int 4.7) = 4
